---
alwaysApply: true
---

# üß† Service

Services cont√™m a l√≥gica de neg√≥cio da aplica√ß√£o. S√£o respons√°veis por validar dados, aplicar regras do dom√≠nio e interagir com reposit√≥rios.

## ‚úÖ Regras

- N√£o acessa diretamente o banco (usa reposit√≥rios).
- Lan√ßa exce√ß√µes com `CustomHttpException`.
- Utiliza `ErrorMessagesService` para mensagens padronizadas.
- Pode fazer valida√ß√µes com base nas regras do neg√≥cio.

## üìå Exemplo

```ts
@Injectable()
export class EmployeeCreateService {
  constructor(
    private readonly employeeRepository: IEmployeeRepository,
    private readonly errorMessagesService: ErrorMessagesService,
    private readonly logger: Logger,
  ) {}

  async execute(dto: EmployeeRequestDTO, ownerId: number): Promise<EmployeeResponseDTO> {
    const establishment = await this.employeeRepository.findEstablishmentById(dto.establishmentId, ownerId);

    if (!establishment) {
      const message = this.errorMessagesService.getMessage(
        ErrorCode.ESTABLISHMENT_NOT_FOUND_OR_ACCESS_DENIED,
        { ESTABLISHMENT_ID: dto.establishmentId, OWNER_ID: ownerId },
      );

      this.logger.warn(message);
      throw new CustomHttpException(
        message,
        HttpStatus.NOT_FOUND,
        ErrorCode.ESTABLISHMENT_NOT_FOUND_OR_ACCESS_DENIED,
      );
    }

    const employee = await this.employeeRepository.createEmployee(dto);
    return employee;
  }
}
```