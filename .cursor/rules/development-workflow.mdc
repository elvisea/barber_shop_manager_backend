---
description: Fluxo de trabalho completo para desenvolvimento NestJS/Node.js
globs: ["**/*.ts", "**/*.js", "**/*.json", "**/*.md"]
alwaysApply: true
---

# üöÄ Fluxo de Desenvolvimento - Barber Shop Manager

Este documento define o fluxo completo de trabalho para desenvolvimento no projeto NestJS/Node.js, desde a identifica√ß√£o de problemas at√© a finaliza√ß√£o de features.

---

## üéØ **PRINC√çPIOS FUNDAMENTAIS**

### ‚úÖ **Regras Obrigat√≥rias:**
- **SEMPRE** seguir o fluxo de branches definido para develop
- **NUNCA** fazer commits diretos na branch develop
- **SEMPRE** criar pull requests para mesclar c√≥digo na develop
- **SEMPRE** fechar issues ap√≥s completar a tarefa
- **SEMPRE** analisar problema antes de alterar c√≥digo

---

## üìã **FLUXO COMPLETO DE DESENVOLVIMENTO**

### **FASE 1: AN√ÅLISE E PLANEJAMENTO** üîç

#### 1.1 **Analisar Problema**
- [ ] Identificar e entender completamente o problema
- [ ] Verificar se j√° existe issue relacionada
- [ ] Analisar impacto e depend√™ncias
- [ ] Documentar contexto e requisitos

#### 1.2 **Planejar Descri√ß√£o da Issue**
- [ ] Dividir problema em peda√ßos pequenos e gerenci√°veis
- [ ] Evitar depend√™ncias entre issues
- [ ] Garantir que cada issue seja uma tarefa de dura√ß√£o razo√°vel (1-4 horas)
- [ ] Definir crit√©rios de aceita√ß√£o claros
- [ ] Especificar arquivos e m√≥dulos afetados

#### 1.3 **Criar Issue no GitHub**
- [ ] T√≠tulo claro e descritivo
- [ ] Descri√ß√£o detalhada com contexto
- [ ] Crit√©rios de aceita√ß√£o definidos
- [ ] Labels apropriadas
- [ ] Assignee definido

### **FASE 2: EXECU√á√ÉO** ‚öôÔ∏è

#### 2.1 **Preparar Ambiente**
- [ ] Criar branch a partir de `develop`
- [ ] Nome da branch: `feature/issue-{numero}`
- [ ] Verificar se c√≥digo compila: `npm run build`
- [ ] Executar testes: `npm run test` (quando dispon√≠vel)

#### 2.2 **Desenvolver Feature**
- [ ] Seguir padr√µes de c√≥digo definidos no projeto
- [ ] Implementar seguindo arquitetura NestJS (Controller ‚Üí Service ‚Üí Repository)
- [ ] Usar DTOs para valida√ß√£o de entrada/sa√≠da
- [ ] Aplicar tratamento de erros centralizado
- [ ] Documentar com Swagger
- [ ] Adicionar logs apropriados

#### 2.3 **Valida√ß√£o Local**
- [ ] C√≥digo compila sem erros: `npm run build`
- [ ] Testes passam: `npm run test`
- [ ] Migra√ß√µes executam: `npm run prisma:migrate`
- [ ] Linting passa: `npm run lint`
- [ ] Documenta√ß√£o atualizada

### **FASE 3: QUALIDADE E REVIS√ÉO** ‚úÖ

#### 3.1 **Checklist de Qualidade**
- [ ] C√≥digo compila sem erros
- [ ] Testes passam (quando dispon√≠vel)
- [ ] Migra√ß√µes executam corretamente
- [ ] Conven√ß√µes de nomenclatura seguidas
- [ ] Documenta√ß√£o atualizada
- [ ] Commit message seguindo padr√£o Conventional Commits
- [ ] C√≥digo revisado e testado localmente

#### 3.2 **Commit e Push**
- [ ] Revisar altera√ß√µes: `git status` e `git diff`
- [ ] Adicionar arquivos seletivamente: `git add -p`
- [ ] Commit com mensagem padronizada: `git commit -m "tipo(escopo): descri√ß√£o"`
- [ ] Push para branch: `git push origin feature/issue-{numero}`

### **FASE 4: INTEGRA√á√ÉO** üîÑ

#### 4.1 **Criar Pull Request**
- [ ] T√≠tulo descritivo
- [ ] Descri√ß√£o detalhada com mudan√ßas
- [ ] Link para issue relacionada: `Closes #123`
- [ ] Screenshots (se aplic√°vel)
- [ ] Checklist de revis√£o preenchido
- [ ] Comando: `gh pr create --base develop --title "..." --body "Closes #123"`

#### 4.2 **Revis√£o e Merge**
- [ ] Aguardar aprova√ß√£o de revis√£o
- [ ] Resolver conflitos se necess√°rio
- [ ] Merge para `develop`
- [ ] Deletar branch ap√≥s merge

#### 4.3 **Finaliza√ß√£o**
- [ ] Fechar issue no GitHub: `gh issue close 123`
- [ ] Verificar se feature funciona em `develop`
- [ ] Atualizar documenta√ß√£o se necess√°rio
- [ ] Deletar branch local: `git branch -d feature/issue-123`

---

## üèóÔ∏è **PADR√ïES DE DESENVOLVIMENTO NESTJS**

### **Estrutura de M√≥dulos**
```
src/modules/<nome-modulo>/
‚îú‚îÄ‚îÄ controllers/         # Entrada HTTP
‚îú‚îÄ‚îÄ services/            # L√≥gica de neg√≥cio
‚îú‚îÄ‚îÄ repositories/        # Acesso a dados
‚îú‚îÄ‚îÄ dtos/                # Contratos de entrada/sa√≠da
‚îú‚îÄ‚îÄ contracts/           # Interfaces de reposit√≥rio
‚îî‚îÄ‚îÄ <module>.module.ts   # Configura√ß√£o do m√≥dulo
```

### **Conven√ß√µes de C√≥digo**
- **Controllers**: Recebem DTOs, chamam services, retornam DTOs
- **Services**: Cont√™m l√≥gica de neg√≥cio, usam repositories
- **Repositories**: Acesso ao banco via Prisma
- **DTOs**: Valida√ß√£o com `class-validator`, documenta√ß√£o Swagger
- **Exce√ß√µes**: Usar `CustomHttpException` e `ErrorMessageService`

### **Padr√µes de Nomenclatura**
- **Arquivos**: `kebab-case` (ex: `user-create.controller.ts`)
- **Classes**: `PascalCase` (ex: `UserCreateController`)
- **M√©todos**: `camelCase` (ex: `createUser`)
- **Vari√°veis**: `camelCase` (ex: `userData`)
- **Constantes**: `UPPER_SNAKE_CASE` (ex: `MAX_RETRY_ATTEMPTS`)

---

## üìù **TEMPLATES DE COMMITS**

### **Formato Obrigat√≥rio:**
```
<tipo>(<escopo>): <descri√ß√£o>
```

### **Tipos Aceitos:**
- `feat`: Nova funcionalidade
- `fix`: Corre√ß√£o de bug
- `docs`: Documenta√ß√£o
- `style`: Formata√ß√£o, espa√ßos
- `refactor`: Refatora√ß√£o de c√≥digo
- `perf`: Melhoria de performance
- `test`: Testes
- `chore`: Manuten√ß√£o, depend√™ncias

### **Exemplos:**
```bash
feat(auth): add password reset functionality
fix(user): handle email validation error
docs(api): update authentication endpoints
refactor(service): simplify user creation logic
```

---

## üîß **COMANDOS ESSENCIAIS**

### **Desenvolvimento**
```bash
# Instalar depend√™ncias
npm install

# Executar em desenvolvimento
npm run start:dev

# Compilar projeto
npm run build

# Executar testes
npm run test

# Linting
npm run lint
```

### **Banco de Dados**
```bash
# Executar migra√ß√µes
npm run prisma:migrate

# Reset do banco (CUIDADO!)
npm run prisma:reset

# Visualizar banco
npm run prisma:studio
```

### **Git Workflow**
```bash
# Criar branch
git checkout -b feature/issue-123

# Verificar status
git status
git diff

# Adicionar arquivos
git add -p

# Commit
git commit -m "feat(user): add email validation"

# Push
git push origin feature/issue-123

# Criar PR (para develop)
gh pr create --base develop --title "feat(user): add email validation" --body "Closes #123"

# Fechar issue ap√≥s merge
gh issue close 123
```

---

## ‚ö†Ô∏è **CHECKLIST FINAL**

Antes de finalizar qualquer tarefa:

- [ ] **C√≥digo**: Compila sem erros
- [ ] **Testes**: Passam (quando dispon√≠vel)
- [ ] **Migra√ß√µes**: Executam corretamente
- [ ] **Conven√ß√µes**: Nomenclatura seguida
- [ ] **Documenta√ß√£o**: Atualizada
- [ ] **Commit**: Mensagem padronizada
- [ ] **PR**: Criado e mesclado para develop
- [ ] **Issue**: Fechada
- [ ] **Branch**: Removida

---

## üö® **REGRAS CR√çTICAS**

1. **NUNCA** commitar diretamente em `develop` ou `main`
2. **SEMPRE** criar branch para cada feature/fix
3. **SEMPRE** analisar problema antes de codificar
4. **SEMPRE** criar issue antes de come√ßar desenvolvimento
5. **SEMPRE** seguir padr√µes de commit
6. **SEMPRE** fechar issue ap√≥s completar tarefa

---

**üí° Este fluxo garante qualidade, rastreabilidade e colabora√ß√£o eficiente no projeto!**