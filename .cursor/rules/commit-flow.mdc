---
alwaysApply: true
---


# üìò Commit Flow ‚Äî Boas Pr√°ticas de Altera√ß√µes e Versionamento

Este documento define o fluxo padr√£o de trabalho para **realizar altera√ß√µes no c√≥digo**, **comentar essas altera√ß√µes** e **envi√°-las para o reposit√≥rio remoto** de forma segura, clara e padronizada.

---

## ‚úÖ Vis√£o Geral

Ap√≥s **qualquer altera√ß√£o no c√≥digo**, o desenvolvedor dever√°:

1. Revisar as modifica√ß√µes realizadas.
2. Confirmar se deseja seguir com o commit.
3. Comentar as mudan√ßas com clareza e padr√£o.
4. Enviar para a branch atual ap√≥s revis√£o.

---

## üß≠ Passo a Passo

### 1. Verificar altera√ß√µes no projeto

Antes de realizar qualquer commit, √© obrigat√≥rio verificar o que foi modificado:

```bash
git status
````

Para ver detalhes das altera√ß√µes em cada arquivo:

```bash
git diff
```

> üîç **Boa pr√°tica**: revise sempre as diferen√ßas para ter total controle sobre o que ser√° commitado.

---

### 2. Adicionar arquivos ao staging

Evite usar `git add .` de forma autom√°tica. Prefira adicionar os arquivos de forma seletiva ou interativa:

```bash
git add <arquivo1> <arquivo2>
# ou
git add -p
```

> ‚ú® Use `git add -p` para revisar e aprovar trecho por trecho do c√≥digo alterado.

---

### 3. Criar commit com mensagem padronizada

Utilize o padr√£o **[Conventional Commits](https://www.conventionalcommits.org/)** para manter o hist√≥rico claro e rastre√°vel.

**Formato recomendado:**

```
<tipo>(<escopo opcional>): <mensagem clara e objetiva>
```

#### Exemplos:

* `feat(user): add user registration validation`
* `fix(auth): handle expired token error`
* `refactor(core): simplify service initialization`
* `docs(readme): update project setup instructions`

#### Tipos aceitos:

| Tipo       | Significado                        |
| ---------- | ---------------------------------- |
| `feat`     | Nova funcionalidade                |
| `fix`      | Corre√ß√£o de erro                   |
| `docs`     | Altera√ß√£o de documenta√ß√£o          |
| `style`    | Estilo (espa√ßos, formata√ß√£o, etc.) |
| `refactor` | Refatora√ß√£o de c√≥digo              |
| `perf`     | Melhoria de performance            |
| `test`     | Adi√ß√£o ou ajuste de testes         |
| `chore`    | Manuten√ß√£o, scripts, configs, etc. |

---

### 4. Confirmar e realizar o commit

Ap√≥s preparar a mensagem, execute:

```bash
git commit -m "tipo(escopo): descri√ß√£o"
```

---

### 5. Enviar para a branch atual

Identifique a branch atual com:

```bash
git branch --show-current
```

Ent√£o execute:

```bash
git push origin <nome-da-branch>
```

### 6. Criar Pull Request (Opcional)

Se estiver trabalhando em uma feature ou fix:

```bash
gh pr create --base develop --title "tipo(escopo): descri√ß√£o" --body "Closes #123"
```

### 7. Fechar Issue (Ap√≥s merge)

Ap√≥s o PR ser mergeado:

```bash
gh issue close 123
```

> ‚úÖ **Exemplo pr√°tico completo:**
>
> ```bash
> git status
> git diff
> git add -p
> git commit -m "fix(auth): prevent login with expired token"
> git push origin $(git branch --show-current)
> gh pr create --base develop --title "fix(auth): prevent login with expired token" --body "Closes #456"
> # Ap√≥s merge do PR:
> gh issue close 456
> ```

---

## ‚ö†Ô∏è Importante

* **Confirme sempre com o time** se deve commitar e enviar ap√≥s altera√ß√µes.
* Nunca envie altera√ß√µes n√£o revisadas.
* Utilize commits pequenos, coesos e bem descritos.
* Se houver altera√ß√µes cr√≠ticas, comunique na PR ou via canal oficial.

---

## üîÑ Fluxo Resumido

```bash
# Revisar altera√ß√µes
git status
git diff

# Adicionar com revis√£o
git add -p

# Criar commit com padr√£o
git commit -m "feat(auth): add password reset flow"

# Enviar para branch atual
git push origin $(git branch --show-current)

# Criar PR (se necess√°rio)
gh pr create --base develop --title "feat(auth): add password reset flow" --body "Closes #123"

# Fechar issue (ap√≥s merge)
gh issue close 123



