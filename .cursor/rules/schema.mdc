---
alwaysApply: true
---

# üìò Documenta√ß√£o do Prisma Schema

Este documento descreve a estrutura, organiza√ß√£o e diretrizes do arquivo `schema.prisma`, utilizado no projeto backend com NestJS + Prisma ORM. Ele define a modelagem do banco de dados PostgreSQL e a maneira como os dados fluem entre as entidades do sistema.

---

## üéØ Objetivo

A modelagem visa suportar uma aplica√ß√£o multi-tenant voltada para estabelecimentos que gerenciam atendimentos, produtos, clientes, funcion√°rios e opera√ß√µes financeiras. Utilizamos **Prisma ORM** pela produtividade, tipagem forte e integra√ß√£o com o TypeScript.

---

## üß± Estrutura Geral

O schema √© dividido em:

- **Enums**: Valores fixos (pap√©is, status, m√©todos de pagamento, tipo de item).
- **Models**: Entidades que representam tabelas no banco de dados.
- **Relacionamentos**: Definidos com `@relation`, promovem integridade e organiza√ß√£o.

---

## üßæ Conven√ß√µes Utilizadas

- Todos os campos usam `snake_case` no banco (com `@map`) e `camelCase` no c√≥digo TypeScript.
- Chaves prim√°rias e estrangeiras s√£o nomeadas explicitamente.
- Campos `createdAt` e `updatedAt` est√£o presentes em todas as entidades.
- Todas as datas s√£o armazenadas em UTC.
- IDs s√£o `uuid` para consist√™ncia e seguran√ßa.
- Mapeamentos com `@@map("nome_tabela")` garantem clareza e legibilidade no banco.

---

## üß≠ Fluxo das Informa√ß√µes

### 1. **Usu√°rio se cadastra**
- Criado um `User` com `email`, `phone`, `password`, etc.
- O campo `emailVerified` controla se ele j√° confirmou o email.
- Um `EmailVerification` √© criado com token e expira√ß√£o.

### 2. **Usu√°rio cria um estabelecimento**
- Criado um `Establishment` com dados b√°sicos.
- O `User` √© vinculado como `EstablishmentMember` com papel `ADMIN`.

### 3. **Usu√°rio cadastra servi√ßos e produtos**
- Registros em `EstablishmentProduct` e `EstablishmentService`.
- Comiss√£o e pre√ßos definidos por padr√£o.

### 4. **Usu√°rio associa membros e define regras**
- Adi√ß√£o de outros `EstablishmentMember` (funcion√°rios).
- Servi√ßos e produtos s√£o associados via `MemberService` e `MemberProduct`.
- Hor√°rios e aus√™ncias s√£o definidos em `MemberWorkingHours` e `MemberAbsencePeriod`.

### 5. **Cliente √© cadastrado**
- Criado um `EstablishmentCustomer`, vinculado a um `Establishment`.

### 6. **Agendamento de um atendimento**
- Criado `Appointment` com `startTime`, `endTime`, `notes`, etc.
- Relacionado ao cliente e membro (funcion√°rio).
- Servi√ßos realizados s√£o definidos em `AppointmentService`.

### 7. **Finaliza√ß√£o de atendimento e pagamento**
- Gerado um `Transaction` com os valores, status de pagamento e comiss√£o.
- Os itens da transa√ß√£o (produto ou servi√ßo) est√£o em `TransactionItem`.

### 8. **Gera√ß√£o de pagamento ao funcion√°rio**
- Criada uma `PaymentOrder` para o `EstablishmentMember`.
- Define o per√≠odo, valor e status do pagamento.

---

## üß© Entidades-Chave

### `User`
Usu√°rios do sistema (donos ou funcion√°rios). Pode estar ligado a v√°rios estabelecimentos via `EstablishmentMember`.

### `Establishment`
Barbearias ou estabelecimentos. Entidade central.

### `EstablishmentMember`
Piv√¥ entre `User` e `Establishment`. Define o papel do usu√°rio no estabelecimento (`Role`).

### `EstablishmentProduct` / `EstablishmentService`
Cat√°logo de produtos e servi√ßos oferecidos por um estabelecimento.

### `MemberProduct` / `MemberService`
Customiza√ß√µes de produtos/servi√ßos por membro (comiss√£o, pre√ßo, dura√ß√£o).

### `EstablishmentCustomer`
Clientes que consomem servi√ßos e produtos.

### `Appointment`
Agendamentos entre clientes e membros. Pode conter m√∫ltiplos servi√ßos.

### `Transaction` / `TransactionItem`
Registro financeiro das transa√ß√µes realizadas (pagamento do cliente).

### `PaymentOrder`
Ordem de pagamento de comiss√µes ao funcion√°rio.

---

## üß† Enums

- `Role`: Define pap√©is no sistema (ex: ADMIN, BARBER).
- `AppointmentStatus`: Estado de um agendamento.
- `PaymentStatus`: Estado de um pagamento.
- `PaymentMethod`: Forma de pagamento (PIX, CART√ÉO, etc).
- `ItemType`: Tipo de item transacionado (PRODUCT, SERVICE).

---

## üí° Boas Pr√°ticas

- Nunca modifique os nomes mapeados com `@map` ap√≥s deploy.
- Sempre adicionar novas entidades com `createdAt` e `updatedAt`.
- Use `enum` para evitar valores livres e inconsistentes.
- Utilize migrations com `prisma migrate` em ambiente controlado.
- Gere o client ap√≥s altera√ß√µes com `npx prisma generate`.

---

## üõ†Ô∏è Comandos √∫teis

```bash
# Rodar migrations
npx prisma migrate dev

# Ver estrutura do banco de dados
npx prisma studio

# Gerar client
npx prisma generate

# Validar schema
npx prisma validate
