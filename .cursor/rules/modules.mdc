---
alwaysApply: true
---

## ‚ú® Guia de Boas Pr√°ticas e Estrutura√ß√£o

Este documento define o padr√£o estrutural e as boas pr√°ticas adotadas neste projeto backend utilizando **NestJS**.

---

## üìÇ Estrutura Base por M√≥dulos

Cada funcionalidade da aplica√ß√£o deve ser organizada em **m√≥dulos isolados**, cada um com suas pr√≥prias camadas:

```
/src/modules/<nome-do-modulo>/
‚îú‚îÄ‚îÄ controllers/         # Entrada e sa√≠da HTTP
‚îú‚îÄ‚îÄ services/            # Regras de neg√≥cio  
‚îú‚îÄ‚îÄ repositories/        # Implementa√ß√µes de acesso a dados
‚îú‚îÄ‚îÄ dtos/                # Contratos de entrada/sa√≠da (validados)
‚îú‚îÄ‚îÄ contracts/           # Interfaces dos m√©todos de reposit√≥rio
‚îî‚îÄ‚îÄ <module>.module.ts   # Configura√ß√£o do m√≥dulo
```

**Observa√ß√£o**: Utilizamos os tipos gerados automaticamente pelo Prisma (`User`, `Establishment`, etc.) em vez de interfaces customizadas, evitando duplica√ß√£o e mantendo sincroniza√ß√£o autom√°tica com o schema do banco.

---

## üìÖ Controller

Respons√°vel por receber requisi√ß√µes HTTP, acionar o service e devolver a resposta.

* Deve usar DTOs validados com `class-validator`.
* Deve ser documentado com Swagger.
* Pode utilizar guards para autentica√ß√£o/autoriza√ß√£o.

### ‚úÖ Exemplo:

```ts
@ApiTags('Funcion√°rios')
@ApiBearerAuth()
@Controller('employees')
@UseGuards(JwtAuthGuard, RolesGuard)
export class EmployeeCreateController {
  constructor(private readonly employeeCreateService: EmployeeCreateService) {}

  @Post()
  @Roles(Role.ADMIN)
  @ApiOperation({ summary: 'Criar novo funcion√°rio' })
  @ApiResponse({ status: 201, type: EmployeeResponseDTO })
  async handle(
    @GetRequestId() id: number,
    @Body() dto: EmployeeRequestDTO,
  ): Promise<EmployeeResponseDTO> {
    return this.employeeCreateService.execute(dto, id);
  }
}
```

---

## üìÇ DTOs (Contratos de Entrada)

Usados para valida√ß√£o dos dados recebidos pelos controllers, documentados com Swagger.

### ‚úÖ Exemplo:

```ts
export class EmployeeRequestDTO {
  @ApiProperty({ example: 1 })
  @IsNumber()
  @IsNotEmpty()
  establishmentId: number;

  @ApiProperty({ example: 'email@empresa.com' })
  @IsEmail()
  @Transform(({ value }) => value.toLowerCase())
  email: string;

  @ApiProperty({ example: '+5511999999999' })
  @IsPhoneNumber()
  phone: string;

  @ApiProperty({ example: 'Jo√£o da Silva' })
  @IsString()
  name: string;

  @ApiProperty({ enum: Role })
  @IsEnum(Role)
  role: Role;
}
```

---

## üìÑ DTOs de Sa√≠da (Response)

```ts
export class EmployeeResponseDTO {
  @ApiProperty({ example: 1 })
  id: number;

  @ApiProperty({ example: 1 })
  establishmentId: number;

  @ApiProperty({ example: 'Jo√£o da Silva' })
  name: string;

  @ApiProperty({ example: 'email@email.com' })
  email: string;

  @ApiProperty({ example: '+5511999999999' })
  phone: string;

  @ApiProperty({ example: '2024-01-21T10:00:00Z' })
  createdAt: Date;

  @ApiProperty({ example: '2024-01-21T10:00:00Z' })
  updatedAt: Date;
}
```

---

## ü§ñ Service

Cont√©m a l√≥gica de neg√≥cio. Deve:

* Validar regras antes de acionar o reposit√≥rio.
* Usar `ErrorMessageService` e `CustomHttpException` para exce√ß√µes.

### ‚ö†Ô∏è Exemplo:

```ts
if (!establishment) {
  const errorMessage = this.errorMessagesService.getMessage(
    ErrorCode.ESTABLISHMENT_NOT_FOUND_OR_ACCESS_DENIED,
    { ESTABLISHMENT_ID: request.establishmentId, OWNER_ID: ownerId },
  );

  this.logger.warn(errorMessage);
  throw new CustomHttpException(
    errorMessage,
    HttpStatus.NOT_FOUND,
    ErrorCode.ESTABLISHMENT_NOT_FOUND_OR_ACCESS_DENIED,
  );
}
```

---

## üìÅ Reposit√≥rios

A camada de reposit√≥rio √© dividida em:

* `employee-repository.interface.ts` (contratos)
* `employee.repository.ts` (implementa√ß√£o)

### ‚úÖ Interface:

```ts
export interface IEmployeeRepository {
  createEmployee(data: EmployeeCreateDTO): Promise<Employee>;
  findByEmail(email: string): Promise<Employee | null>;
}
```

### ‚úÖ Implementa√ß√£o:

```ts
@Injectable()
export class EmployeeRepository implements IEmployeeRepository {
  constructor(private readonly prismaService: PrismaService) {}

  async createEmployee(data: EmployeeCreateDTO): Promise<Employee> {
    return this.prismaService.employee.create({
      data: {
        ...data,
        establishment: { connect: { id: data.establishmentId } },
      },
    });
  }
}
```

---

## üìä Resumo das Regras

| Camada     | Entrada (contrato)    | Sa√≠da (contrato)     | Valida√ß√£o | Swagger |
| ---------- | --------------------- | -------------------- | --------- | ------- |
| Controller | DTO (class-validator) | DTO Response         | ‚úÖ         | ‚úÖ       |
| Service    | DTO Request           | DTO Response         | Opcional  | -       |
| Repository | Tipos Prisma          | Tipos Prisma         | -         | -       |

**Tipos utilizados:**
- **DTOs**: Para valida√ß√£o de entrada e contratos de sa√≠da da API
- **Tipos Prisma**: Gerados automaticamente (`User`, `Establishment`, etc.)
- **Interfaces de Contrato**: Apenas para definir m√©todos dos reposit√≥rios (`IUserRepository`)

---

## üîß Exce√ß√µes Personalizadas

Utilizar sempre:

```ts
throw new CustomHttpException(
  this.errorMessagesService.getMessage(ErrorCode.EXAMPLE, { KEY: value }),
  HttpStatus.CONFLICT,
  ErrorCode.EXAMPLE,
);
```

---

## üóÑÔ∏è Estrutura do Banco de Dados

O projeto utiliza **Prisma** como ORM com as seguintes entidades principais:

- **User** - Usu√°rios do sistema
- **Establishment** - Estabelecimentos/Barbearias
- **EstablishmentMember** - Funcion√°rios dos estabelecimentos
- **EstablishmentCustomer** - Clientes dos estabelecimentos
- **Service** - Servi√ßos oferecidos
- **Product** - Produtos vendidos
- **Appointment** - Agendamentos
- **Transaction** - Transa√ß√µes financeiras
- **PaymentOrder** - Ordens de pagamento para funcion√°rios

---

## üß™ Testes

```bash
# Testes unit√°rios
npm run test

# Testes e2e
npm run test:e2e

# Cobertura de testes
npm run test:cov
```

---

## üìö Documenta√ß√£o da API

Ap√≥s iniciar a aplica√ß√£o, acesse:
- **Swagger UI**: `http://localhost:3000/api`
- **Redoc**: `http://localhost:3000/api-docs`

---

## üåü Funcionalidades Principais

- ‚úÖ **Autentica√ß√£o JWT** com refresh tokens
- ‚úÖ **Gerenciamento de Estabelecimentos** multi-tenant
- ‚úÖ **Cadastro de Funcion√°rios** com diferentes roles
- ‚úÖ **Gest√£o de Clientes** por estabelecimento
- ‚úÖ **Sistema de Agendamentos** completo
- ‚úÖ **Controle Financeiro** com transa√ß√µes
- ‚úÖ **Sistema de Comiss√µes** para funcion√°rios
- ‚úÖ **Hor√°rios de Funcionamento** configur√°veis
- ‚úÖ **Per√≠odos de Fechamento** para feriados/f√©rias
- ‚úÖ **Verifica√ß√£o de Email** para novos usu√°rios
- ‚úÖ **Tratamento de Erros** centralizado

---

## ü§ù Contribuindo

Fique √† vontade para duplicar essa estrutura para novos m√≥dulos. Em caso de d√∫vidas ou padr√µes n√£o contemplados aqui, padronize de acordo com o que j√° foi feito no m√≥dulo de exemplo `employees`.
