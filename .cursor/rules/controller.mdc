---
alwaysApply: true
---

# üß≠ Controller

Controllers s√£o respons√°veis por receber requisi√ß√µes HTTP, acionar os services e devolver uma resposta adequada. Eles n√£o devem conter regras de neg√≥cio.

## ‚úÖ Regras

- Utilizar DTOs validados com `class-validator` como entrada.
- Documentar endpoints com `@ApiTags`, `@ApiOperation`, `@ApiResponse` (Swagger).
- Usar guards (`JwtAuthGuard`, `RolesGuard`, etc.) quando necess√°rio.
- Deve delegar toda l√≥gica para o service correspondente.

## üìå Exemplo

```ts
@ApiTags('Funcion√°rios')
@ApiBearerAuth()
@Controller('employees')
@UseGuards(JwtAuthGuard, RolesGuard)
export class EmployeeCreateController {
  constructor(private readonly employeeCreateService: EmployeeCreateService) {}

  @Post()
  @Roles(Role.ADMIN)
  @ApiOperation({ summary: 'Criar novo funcion√°rio' })
  @ApiResponse({ status: 201, type: EmployeeResponseDTO })
  async handle(
    @GetRequestId() id: number,
    @Body() dto: EmployeeRequestDTO,
  ): Promise<EmployeeResponseDTO> {
    return this.employeeCreateService.execute(dto, id);
  }
}
```
