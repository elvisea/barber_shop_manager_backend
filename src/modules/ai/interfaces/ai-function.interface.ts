/**
 * üîß Interfaces para Function Calling - Sistema de IA
 * 
 * Este arquivo define todas as interfaces necess√°rias para implementar
 * function calling no sistema de IA, seguindo as boas pr√°ticas da OpenAI.
 * 
 * ARQUITETURA:
 * - AIFunctionParameter: Define par√¢metros individuais
 * - AIFunctionDefinition: Define uma fun√ß√£o completa
 * - AIFunctionCall: Representa uma chamada de fun√ß√£o
 * - AIFunctionResult: Resultado da execu√ß√£o
 * - AIFunctionHandler: Combina defini√ß√£o e handler
 */

/**
 * üìã Par√¢metro de Fun√ß√£o - Define um par√¢metro individual
 * 
 * Segue o padr√£o JSON Schema para valida√ß√£o de par√¢metros
 * Compat√≠vel com OpenAI Function Calling
 */
export interface AIFunctionParameter {
  /** Tipo do par√¢metro (string, number, boolean, object, array) */
  type: 'string' | 'number' | 'boolean' | 'object' | 'array';

  /** Descri√ß√£o do par√¢metro para a IA */
  description: string;

  /** Valores permitidos (para enum) */
  enum?: string[];

  /** Se o par√¢metro √© obrigat√≥rio */
  required?: boolean;
}

/**
 * üìù Defini√ß√£o de Fun√ß√£o - Define uma fun√ß√£o completa para a IA
 * 
 * Cont√©m todas as informa√ß√µes necess√°rias para a IA entender
 * como chamar a fun√ß√£o e quais par√¢metros esperar
 */
export interface AIFunctionDefinition {
  /** Nome √∫nico da fun√ß√£o */
  name: string;

  /** Descri√ß√£o da fun√ß√£o para a IA */
  description: string;

  /** Esquema dos par√¢metros (JSON Schema) */
  parameters: {
    /** Tipo sempre 'object' para fun√ß√µes */
    type: 'object';

    /** Propriedades dos par√¢metros */
    properties: Record<string, AIFunctionParameter>;

    /** Lista de par√¢metros obrigat√≥rios */
    required: string[];

    /** N√£o permite propriedades adicionais */
    additionalProperties: false;
  };

  /** Se a valida√ß√£o deve ser estrita */
  strict?: boolean;
}

/**
 * üìû Chamada de Fun√ß√£o - Representa uma execu√ß√£o de fun√ß√£o
 * 
 * Gerada pela IA quando decide chamar uma fun√ß√£o
 * Cont√©m o nome da fun√ß√£o e os argumentos fornecidos
 */
export interface AIFunctionCall {
  /** Nome da fun√ß√£o a ser executada */
  name: string;

  /** Argumentos fornecidos pela IA */
  arguments: Record<string, any>;
}

/**
 * üì§ Resultado de Fun√ß√£o - Resultado da execu√ß√£o
 * 
 * Retornado ap√≥s executar uma fun√ß√£o
 * Indica sucesso/falha e cont√©m dados ou erro
 */
export interface AIFunctionResult {
  /** Se a execu√ß√£o foi bem-sucedida */
  success: boolean;

  /** Dados retornados (se sucesso) */
  data?: any;

  /** Mensagem de erro (se falha) */
  error?: string;
}

/**
 * üõ†Ô∏è Handler de Fun√ß√£o - Combina defini√ß√£o e implementa√ß√£o
 * 
 * Interface completa que combina a defini√ß√£o da fun√ß√£o
 * com sua implementa√ß√£o (handler)
 */
export interface AIFunctionHandler {
  /** Defini√ß√£o da fun√ß√£o para a IA */
  definition: AIFunctionDefinition;

  /** Implementa√ß√£o da fun√ß√£o */
  handler: (args: Record<string, any>) => Promise<AIFunctionResult>;
}

/**
 * üìö Exemplos de Uso
 * 
 * // 1. Definir uma fun√ß√£o simples
 * const createPlanFunction: AIFunctionDefinition = {
 *   name: 'create_plan',
 *   description: 'Cria um novo plano de barbearia',
 *   parameters: {
 *     type: 'object',
 *     properties: {
 *       name: {
 *         type: 'string',
 *         description: 'Nome do plano',
 *       },
 *       price: {
 *         type: 'number',
 *         description: 'Pre√ßo em reais',
 *       },
 *     },
 *     required: ['name', 'price'],
 *     additionalProperties: false,
 *   },
 * };
 * 
 * // 2. Implementar o handler
 * const createPlanHandler: AIFunctionHandler = {
 *   definition: createPlanFunction,
 *   handler: async (args) => {
 *     try {
 *       const result = await createPlan(args);
 *       return { success: true, data: result };
 *     } catch (error) {
 *       return { success: false, error: error.message };
 *     }
 *   },
 * };
 * 
 * // 3. Chamada da IA
 * const functionCall: AIFunctionCall = {
 *   name: 'create_plan',
 *   arguments: { name: 'Plano Premium', price: 99.99 },
 * };
 * 
 * // 4. Execu√ß√£o
 * const result: AIFunctionResult = await createPlanHandler.handler(functionCall.arguments);
 */
