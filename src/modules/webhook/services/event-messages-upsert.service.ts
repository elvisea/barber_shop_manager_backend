import { Injectable, Logger } from '@nestjs/common';

import { MessagesUpsertLog } from '../interfaces';

import { MessageBufferService } from './message-buffer.service';

/**
 * âœ… EventMessagesUpsertService - VersÃ£o Refatorada
 *
 * Esta versÃ£o usa a estrutura centralizada:
 * - Prompt centralizado em BARBER_SHOP_PROMPT
 * - Sistema de buffer centralizado em MessageBufferService
 * - Sem dependÃªncia de barberShopFunctions (usa ToolRegistry)
 * - CÃ³digo mais limpo e reutilizÃ¡vel
 */

@Injectable()
export class EventMessagesUpsertService {
  private readonly logger = new Logger(EventMessagesUpsertService.name);

  constructor(private readonly messageBufferService: MessageBufferService) {
    this.logger.log(
      '[EventMessagesUpsertService] Inicializado com MessageBufferService',
    );
  }

  /**
   * ðŸŽ¯ MÃ©todo principal simplificado
   * Delega o processamento para o MessageBufferService
   */
  async handle(payload: MessagesUpsertLog): Promise<void> {
    try {
      this.logger.log(
        `[EventMessagesUpsertService] Processando mensagem: ${payload.data.key.id}`,
      );

      // âœ… Delega para o MessageBufferService que gerencia buffer, IA e envio
      await this.messageBufferService.handleMessage(payload);

      this.logger.log(
        '[EventMessagesUpsertService] Mensagem processada com sucesso',
      );
    } catch (error) {
      this.logger.error(
        '[EventMessagesUpsertService] Erro ao processar mensagem:',
        error,
      );
      throw error; // Re-throw para que o router possa tratar
    }
  }

  /**
   * ðŸ“Š ObtÃ©m estatÃ­sticas dos buffers (delegaÃ§Ã£o)
   */
  getBufferStats() {
    return this.messageBufferService.getBufferStats();
  }

  /**
   * ðŸ§¹ Limpa buffers antigos (delegaÃ§Ã£o)
   */
  clearOldBuffers(): void {
    this.messageBufferService.clearOldBuffers();
  }
}
