import { applyDecorators } from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiBearerAuth,
  ApiForbiddenResponse,
  ApiNotFoundResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiUnauthorizedResponse,
} from '@nestjs/swagger';

import { {{EntityName}}ResponseDTO } from '../dtos/api/{{entityName}}-response.dto';

import { SwaggerErrors } from '@/common/swagger-errors';
import { ErrorCode } from '@/enums/error-code';

/**
 * Documentação completa do endpoint de busca de {{entityName}} por ID
 *
 * Este decorator composto aplica toda a documentação Swagger necessária
 * para o endpoint GET /{{moduleName}}/{{entityName}}s/:id
 */
export function Find{{EntityName}}ByIdDocs() {
  return applyDecorators(
    ApiOperation({
      summary: 'Buscar {{entityName}} por ID',
      description: 'Busca um {{entityName}} específico pelo seu ID único.',
    }),
    ApiParam({
      name: 'id',
      description: 'ID único do {{entityName}}',
      example: '550e8400-e29b-41d4-a716-446655440000',
    }),
    ApiBearerAuth(),
    ApiOkResponse({
      description: '{{EntityName}} encontrado com sucesso',
      type: {{EntityName}}ResponseDTO,
      example: {
        id: '550e8400-e29b-41d4-a716-446655440000',
        name: 'Exemplo de {{entityName}}',
        createdAt: '2025-08-22T00:00:00.000Z',
        updatedAt: '2025-08-22T00:00:00.000Z',
      },
    }),
    ApiBadRequestResponse({
      description: 'ID inválido fornecido',
      schema: {
        example: SwaggerErrors[ErrorCode.VALIDATION_ERROR].example,
      },
    }),
    ApiUnauthorizedResponse({
      description: 'Token de autenticação inválido ou ausente',
      schema: {
        example: {
          statusCode: 401,
          message: 'Unauthorized',
          error: 'Unauthorized',
        },
      },
    }),
    ApiForbiddenResponse({
      description: 'Acesso negado - usuário não tem permissão para visualizar este {{entityName}}',
      schema: {
        example: SwaggerErrors[ErrorCode.ACCESS_DENIED].example,
      },
    }),
    ApiNotFoundResponse({
      description: '{{EntityName}} não encontrado',
      schema: {
        example: SwaggerErrors[ErrorCode.NOT_FOUND].example,
      },
    }),
  );
}
