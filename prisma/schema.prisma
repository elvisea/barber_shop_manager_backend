// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  RECEPTIONIST
  HAIRDRESSER
  BARBER
  ADMIN
}

model User {
  id        String   @id @default(uuid()) @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique @map("email")
  name      String   @map("name")
  phone     String   @map("phone")
  password  String   @map("password")

  // Relação com a tabela pivô
  memberships EstablishmentMember[]

  @@index([email])
  @@map("users")
}

model Establishment {
  id        String   @id @default(uuid()) @map("id")
  name      String   @map("name")
  address   String   @map("address")
  phone     String   @map("phone")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relação com a tabela pivô
  members  EstablishmentMember[]
  products EstablishmentProduct[]
  services EstablishmentService[]

  @@map("establishments")
}

// Tabela Pivô: A "cola" entre User e Establishment
model EstablishmentMember {
  // Relações que formam a chave primária
  userId          String @map("user_id")
  establishmentId String @map("establishment_id")

  // Dados específicos da relação
  role     Role // O papel do usuário NESTE estabelecimento
  isActive Boolean @default(true) @map("is_active")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Definindo as relações com o Prisma
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishment Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  // Chave primária composta para garantir que um usuário só tenha um registro por estabelecimento
  @@id([userId, establishmentId])
  @@map("establishment_members")
}

model EstablishmentProduct {
  id              String        @id @default(uuid()) @map("id")
  name            String        @map("name")
  description     String?       @map("description")
  price           Int           @map("price") // Armazenado em centavos
  commission      Decimal       @map("commission") @db.Decimal(5, 4)
  stock           Int           @map("stock")
  establishmentId String        @map("establishment_id")
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@unique([establishmentId, name])
  @@map("establishment_products")
}

model EstablishmentService {
  id              String        @id @default(uuid()) @map("id")
  name            String        @map("name")
  description     String?       @map("description")
  duration        Int           @map("duration")
  price           Int           @map("price") // Armazenado em centavos
  commission      Decimal       @map("commission") @db.Decimal(5, 4)
  establishmentId String        @map("establishment_id")
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@unique([establishmentId, name])
  @@map("establishment_services")
}
