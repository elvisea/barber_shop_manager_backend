generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE MODELS
// ============================================================================

/// Representa um usuário do sistema (dono ou funcionário).
model User {
  id                   String                 @id @default(uuid()) @map("id")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  email                String                 @unique @map("email")
  name                 String                 @map("name")
  phone                String                 @map("phone")
  password             String                 @map("password")
  role                 UserRole               @default(OWNER) @map("role")
  /// Data de exclusão lógica.
  deletedAt            DateTime?              @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy            String?                @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted            Boolean                @default(false) @map("is_deleted")
  ownedEstablishments  Establishment[]
  createdPaymentOrders PaymentOrder[]
  refreshTokens        RefreshToken[]
  createdSubscriptions Subscription[]
  emailVerification    UserEmailVerification?

  @@index([email])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("users")
}

/// Representa um estabelecimento/barbearia.
model Establishment {
  id             String                  @id @default(uuid()) @map("id")
  name           String                  @map("name")
  address        String                  @map("address")
  phone          String                  @map("phone")
  ownerId        String                  @map("owner_id")
  createdAt      DateTime                @default(now()) @map("created_at")
  updatedAt      DateTime                @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt      DateTime?               @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy      String?                 @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted      Boolean                 @default(false) @map("is_deleted")
  appointments   Appointment[]
  closurePeriods ClosurePeriod[]
  customers      EstablishmentCustomer[]
  products       EstablishmentProduct[]
  services       EstablishmentService[]
  owner          User                    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members        Member[]
  openingHours   OpeningHours[]
  subscriptions  Subscription[]

  @@unique([ownerId, phone])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("establishments")
}

// ============================================================================
// MEMBERS MODELS
// ============================================================================

/// Representa um membro/funcionário de um estabelecimento.
model Member {
  id                String                   @id @default(uuid()) @map("id")
  name              String                   @map("name")
  email             String                   @unique @map("email")
  phone             String                   @unique @map("phone")
  password          String                   @map("password")
  role              MemberRole               @map("role")
  isActive          Boolean                  @default(true) @map("is_active")
  establishmentId   String                   @map("establishment_id")
  createdAt         DateTime                 @default(now()) @map("created_at")
  updatedAt         DateTime                 @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt         DateTime?                @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy         String?                  @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted         Boolean                  @default(false) @map("is_deleted")
  appointments      Appointment[]
  absencePeriods    MemberAbsencePeriod[]
  emailVerification MemberEmailVerification?
  memberProducts    MemberProduct[]
  refreshTokens     MemberRefreshToken[]
  memberServices    MemberService[]
  workingHours      MemberWorkingHours[]
  establishment     Establishment            @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  paymentOrders     PaymentOrder[]
  transactions      Transaction[]

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("members")
}

/// Refresh tokens para autenticação de membros.
model MemberRefreshToken {
  id        String    @id @default(uuid()) @map("id")
  token     String    @unique @map("token")
  expiresAt DateTime  @map("expires_at")
  revoked   Boolean   @default(false) @map("revoked")
  userAgent String?   @map("user_agent")
  ipAddress String?   @map("ip_address")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  memberId  String    @map("member_id")
  /// Data de exclusão lógica.
  deletedAt DateTime? @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy String?   @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted Boolean   @default(false) @map("is_deleted")
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("member_refresh_tokens")
}

/// Horários de trabalho dos membros.
model MemberWorkingHours {
  id        String    @id @default(uuid()) @map("id")
  dayOfWeek Int       @map("day_of_week")
  startTime String    @map("start_time")
  endTime   String    @map("end_time")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  memberId  String    @map("member_id")
  /// Data de exclusão lógica.
  deletedAt DateTime? @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy String?   @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted Boolean   @default(false) @map("is_deleted")
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, dayOfWeek])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("member_working_hours")
}

/// Períodos de ausência dos membros.
model MemberAbsencePeriod {
  id        String    @id @default(uuid()) @map("id")
  reason    String?   @map("reason")
  startDate DateTime  @map("start_date")
  endDate   DateTime  @map("end_date")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  memberId  String    @map("member_id")
  /// Data de exclusão lógica.
  deletedAt DateTime? @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy String?   @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted Boolean   @default(false) @map("is_deleted")
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("member_absence_periods")
}

// ============================================================================
// CUSTOMERS MODELS
// ============================================================================

/// Clientes dos estabelecimentos.
model EstablishmentCustomer {
  id              String        @id @default(uuid()) @map("id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  name            String        @map("name")
  email           String?       @map("email")
  phone           String?       @map("phone")
  establishmentId String        @map("establishment_id")
  /// Data de exclusão lógica.
  deletedAt       DateTime?     @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?       @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean       @default(false) @map("is_deleted")
  appointments    Appointment[]
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@unique([establishmentId, email])
  @@unique([establishmentId, phone])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("establishment_customers")
}

// ============================================================================
// PRODUCTS & SERVICES MODELS
// ============================================================================

/// Produtos dos estabelecimentos.
model EstablishmentProduct {
  id               String            @id @default(uuid()) @map("id")
  name             String            @map("name")
  description      String?           @map("description")
  price            Int               @map("price")
  commission       Decimal           @map("commission") @db.Decimal(5, 4)
  stock            Int               @map("stock")
  establishmentId  String            @map("establishment_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt        DateTime?         @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy        String?           @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted        Boolean           @default(false) @map("is_deleted")
  establishment    Establishment     @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  memberProducts   MemberProduct[]
  transactionItems TransactionItem[]

  @@unique([establishmentId, name])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("establishment_products")
}

/// Serviços dos estabelecimentos.
model EstablishmentService {
  id                  String               @id @default(uuid()) @map("id")
  name                String               @map("name")
  description         String?              @map("description")
  duration            Int                  @map("duration")
  price               Int                  @map("price")
  commission          Decimal              @map("commission") @db.Decimal(5, 4)
  establishmentId     String               @map("establishment_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt           DateTime?            @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy           String?              @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted           Boolean              @default(false) @map("is_deleted")
  appointmentServices AppointmentService[]
  establishment       Establishment        @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  memberServices      MemberService[]
  transactionItems    TransactionItem[]

  @@unique([establishmentId, name])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("establishment_services")
}

/// Produtos personalizados por membro.
model MemberProduct {
  id              String               @id @default(uuid()) @map("id")
  price           Int                  @map("price")
  commission      Decimal              @map("commission") @db.Decimal(5, 4)
  establishmentId String               @map("establishment_id")
  productId       String               @map("product_id")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  memberId        String               @map("member_id")
  /// Data de exclusão lógica.
  deletedAt       DateTime?            @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?              @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean              @default(false) @map("is_deleted")
  member          Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  product         EstablishmentProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([memberId, establishmentId, productId])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("member_products")
}

/// Serviços personalizados por membro.
model MemberService {
  id              String               @id @default(uuid()) @map("id")
  price           Int                  @map("price")
  commission      Decimal              @map("commission") @db.Decimal(5, 4)
  duration        Int                  @map("duration")
  establishmentId String               @map("establishment_id")
  serviceId       String               @map("service_id")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  memberId        String               @map("member_id")
  /// Data de exclusão lógica.
  deletedAt       DateTime?            @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?              @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean              @default(false) @map("is_deleted")
  member          Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  service         EstablishmentService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([memberId, establishmentId, serviceId])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("member_services")
}

// ============================================================================
// APPOINTMENTS MODELS
// ============================================================================

/// Agendamentos de clientes.
model Appointment {
  id              String                @id @default(uuid()) @map("id")
  startTime       DateTime              @map("start_time")
  endTime         DateTime              @map("end_time")
  totalAmount     Int                   @map("total_amount")
  totalDuration   Int                   @map("total_duration")
  status          AppointmentStatus     @default(PENDING) @map("status")
  notes           String?               @map("notes")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  customerId      String                @map("customer_id")
  memberId        String                @map("member_id")
  establishmentId String                @map("establishment_id")
  /// Data de exclusão lógica.
  deletedAt       DateTime?             @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?               @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean               @default(false) @map("is_deleted")
  services        AppointmentService[]
  customer        EstablishmentCustomer @relation(fields: [customerId], references: [id])
  establishment   Establishment         @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  member          Member                @relation(fields: [memberId], references: [id])
  transaction     Transaction?

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("appointments")
}

/// Serviços realizados em um agendamento.
model AppointmentService {
  id            String               @id @default(uuid()) @map("id")
  price         Int                  @map("price")
  duration      Int                  @map("duration")
  commission    Decimal              @map("commission") @db.Decimal(5, 4)
  appointmentId String               @map("appointment_id")
  serviceId     String               @map("service_id")
  /// Data de exclusão lógica.
  deletedAt     DateTime?            @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy     String?              @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted     Boolean              @default(false) @map("is_deleted")
  appointment   Appointment          @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       EstablishmentService @relation(fields: [serviceId], references: [id])

  @@unique([appointmentId, serviceId])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("appointment_services")
}

// ============================================================================
// TRANSACTIONS MODELS
// ============================================================================

/// Transações financeiras.
model Transaction {
  id               String                @id @default(uuid()) @map("id")
  totalAmount      Int                   @map("total_amount")
  discount         Int                   @default(0) @map("discount")
  finalAmount      Int                   @map("final_amount")
  commissionAmount Int                   @map("commission_amount")
  paymentMethod    PaymentMethod         @map("payment_method")
  paymentStatus    PaymentStatus         @map("payment_status")
  notes            String?               @map("notes")
  transactionDate  DateTime              @default(now()) @map("transaction_date")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")
  appointmentId    String?               @unique @map("appointment_id")
  customerId       String                @map("customer_id")
  memberId         String                @map("member_id")
  establishmentId  String                @map("establishment_id")
  /// Data de exclusão lógica.
  deletedAt        DateTime?             @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy        String?               @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted        Boolean               @default(false) @map("is_deleted")
  items            TransactionItem[]
  appointment      Appointment?          @relation(fields: [appointmentId], references: [id])
  customer         EstablishmentCustomer @relation(fields: [customerId], references: [id])
  member           Member                @relation(fields: [memberId], references: [id])

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("transactions")
}

/// Itens de uma transação.
model TransactionItem {
  id            String                @id @default(uuid()) @map("id")
  itemType      ItemType              @map("item_type")
  quantity      Int                   @default(1) @map("quantity")
  unitPrice     Int                   @map("unit_price")
  totalPrice    Int                   @map("total_price")
  commission    Decimal               @map("commission") @db.Decimal(5, 4)
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  transactionId String                @map("transaction_id")
  productId     String?               @map("product_id")
  serviceId     String?               @map("service_id")
  /// Data de exclusão lógica.
  deletedAt     DateTime?             @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy     String?               @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted     Boolean               @default(false) @map("is_deleted")
  product       EstablishmentProduct? @relation(fields: [productId], references: [id], onDelete: Restrict)
  service       EstablishmentService? @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  transaction   Transaction           @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("transaction_items")
}

/// Ordens de pagamento para membros.
model PaymentOrder {
  id              String        @id @default(uuid()) @map("id")
  totalAmount     Int           @map("total_amount")
  status          PaymentStatus @map("status")
  paymentMethod   PaymentMethod @map("payment_method")
  paymentDate     DateTime?     @map("payment_date")
  periodStart     DateTime      @map("period_start")
  periodEnd       DateTime      @map("period_end")
  notes           String?       @map("notes")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  memberId        String        @map("member_id")
  establishmentId String        @map("establishment_id")
  createdById     String        @map("created_by_id")
  /// Data de exclusão lógica.
  deletedAt       DateTime?     @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?       @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean       @default(false) @map("is_deleted")
  createdBy       User          @relation(fields: [createdById], references: [id])
  member          Member        @relation(fields: [memberId], references: [id])

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("payment_orders")
}

// ============================================================================
// SUBSCRIPTIONS MODELS
// ============================================================================

/// Planos de assinatura disponíveis.
model Plan {
  id            String         @id @default(uuid()) @map("id")
  name          String         @map("name")
  description   String?        @map("description")
  price         Int            @map("price")
  duration      Int            @map("duration")
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt     DateTime?      @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy     String?        @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted     Boolean        @default(false) @map("is_deleted")
  subscriptions Subscription[]

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("plans")
}

/// Assinaturas de planos por estabelecimentos.
model Subscription {
  id              String             @id @default(uuid()) @map("id")
  establishmentId String             @map("establishment_id")
  planId          String             @map("plan_id")
  createdById     String?            @map("created_by_id")
  startDate       DateTime           @map("start_date")
  endDate         DateTime           @map("end_date")
  status          SubscriptionStatus @default(PENDING) @map("status")
  paid            Boolean            @default(false) @map("paid")
  phone           String             @map("phone")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt       DateTime?          @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?            @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean            @default(false) @map("is_deleted")
  createdBy       User?              @relation(fields: [createdById], references: [id])
  establishment   Establishment      @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  plan            Plan               @relation(fields: [planId], references: [id])

  @@index([establishmentId])
  @@index([planId])
  @@index([createdById])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("subscriptions")
}

// ============================================================================
// EMAIL VERIFICATION MODELS
// ============================================================================

/// Verificação de email de usuários.
model UserEmailVerification {
  id        String    @id @default(uuid()) @map("id")
  email     String    @unique @map("email")
  token     String    @map("token")
  expiresAt DateTime  @map("expires_at")
  verified  Boolean   @default(false) @map("verified")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  userId    String    @unique @map("user_id")
  /// Data de exclusão lógica.
  deletedAt DateTime? @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy String?   @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted Boolean   @default(false) @map("is_deleted")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("user_email_verifications")
}

/// Verificação de email de membros.
model MemberEmailVerification {
  id        String    @id @default(uuid()) @map("id")
  email     String    @unique @map("email")
  token     String    @map("token")
  expiresAt DateTime  @map("expires_at")
  verified  Boolean   @default(false) @map("verified")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  memberId  String    @unique @map("member_id")
  /// Data de exclusão lógica.
  deletedAt DateTime? @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy String?   @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted Boolean   @default(false) @map("is_deleted")
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("member_email_verifications")
}

// ============================================================================
// AUTHENTICATION MODELS
// ============================================================================

/// Refresh tokens para autenticação de usuários.
model RefreshToken {
  id        String    @id @default(uuid()) @map("id")
  token     String    @unique @map("token")
  expiresAt DateTime  @map("expires_at")
  revoked   Boolean   @default(false) @map("revoked")
  userAgent String?   @map("user_agent")
  ipAddress String?   @map("ip_address")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  userId    String    @map("user_id")
  /// Data de exclusão lógica.
  deletedAt DateTime? @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy String?   @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted Boolean   @default(false) @map("is_deleted")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("refresh_tokens")
}

// ============================================================================
// CONFIGURATION MODELS
// ============================================================================

/// Horários de funcionamento dos estabelecimentos.
model OpeningHours {
  id              String        @id @default(uuid()) @map("id")
  dayOfWeek       Int           @map("day_of_week")
  openingTime     String        @map("opening_time")
  closingTime     String        @map("closing_time")
  establishmentId String        @map("establishment_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt       DateTime?     @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?       @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean       @default(false) @map("is_deleted")
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@unique([establishmentId, dayOfWeek])
  @@index([deletedAt])
  @@index([isDeleted])
  @@map("opening_hours")
}

/// Períodos de fechamento dos estabelecimentos.
model ClosurePeriod {
  id              String        @id @default(uuid()) @map("id")
  startDate       DateTime      @map("start_date")
  endDate         DateTime      @map("end_date")
  reason          String?       @map("reason")
  establishmentId String        @map("establishment_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  /// Data de exclusão lógica.
  deletedAt       DateTime?     @map("deleted_at")
  /// ID do usuário que realizou a exclusão.
  deletedBy       String?       @map("deleted_by")
  /// Flag para facilitar consultas de registros não deletados.
  isDeleted       Boolean       @default(false) @map("is_deleted")
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@index([isDeleted])
  @@map("closure_periods")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  OWNER
  ROOT
}

enum MemberRole {
  RECEPTIONIST
  HAIRDRESSER
  BARBER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  OTHER
}

enum ItemType {
  PRODUCT
  SERVICE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}
