name: Barber Shop Manager CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
      - '.github/workflows/pipeline.yml'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'prisma/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
      - '.github/workflows/pipeline.yml'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'prisma/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/barber_shop_manager_backend

  # Configurações do Banco de Dados
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_EXTERNAL_PORT: ${{ secrets.POSTGRES_EXTERNAL_PORT }}
  DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}?schema=public

  # Configurações de JWT
  JWT_SECRET_PUBLIC_KEY: ${{ secrets.JWT_SECRET_PUBLIC_KEY }}
  JWT_SECRET_PRIVATE_KEY: ${{ secrets.JWT_SECRET_PRIVATE_KEY }}
  ACCESS_TOKEN_EXPIRATION: ${{ secrets.ACCESS_TOKEN_EXPIRATION }}
  REFRESH_TOKEN_EXPIRATION: ${{ secrets.REFRESH_TOKEN_EXPIRATION }}

  # Configurações de Email
  MAIL_HOST: ${{ secrets.MAIL_HOST }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  MAIL_SECURE: ${{ secrets.MAIL_SECURE }}
  MAIL_USER: ${{ secrets.MAIL_USER }}
  MAIL_PASS: ${{ secrets.MAIL_PASS }}

  # Configurações de API Externa
  EVOLUTION_API_KEY: ${{ secrets.EVOLUTION_API_KEY }}
  EVOLUTION_API_URL: ${{ secrets.EVOLUTION_API_URL }}

  # Configurações de IA
  AI_PROVIDER: ${{ secrets.AI_PROVIDER }}
  DEEPSEEK_BASE_URL: ${{ secrets.DEEPSEEK_BASE_URL }}
  DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
  VERBOSE_LOGGING: ${{ secrets.VERBOSE_LOGGING }}

  # Configurações de MCP (Opcional)
  MCP_SERVER_URL: ${{ secrets.MCP_SERVER_URL }}
  MCP_SERVER_PATH: ${{ secrets.MCP_SERVER_PATH }}

  # Configurações de Containers
  CONTAINER_NAME_APP: ${{ secrets.CONTAINER_NAME_APP }}
  CONTAINER_NAME_DATABASE: ${{ secrets.CONTAINER_NAME_DATABASE }}
  DOCKER_NETWORK_NAME: ${{ secrets.DOCKER_NETWORK_NAME }}

jobs:
  quality:
    name: Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      # TODO: Implementar regras de lint mais rigorosas no futuro
      # - name: Run ESLint
      #   run: npm run lint

      - name: Run ESLint (Non-blocking)
        run: npm run lint || echo "Lint issues found but pipeline continues"

      - name: Check Types
        run: npm run build
        
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Unit Tests
        run: npm run test || true

      - name: Run E2E Tests
        run: npm run test:e2e || true

  build:
    name: Build App
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build App
        run: npm run build

      - name: Print Image Name for Debugging
        run: |
          echo "Docker Hub Username: ${{ secrets.DOCKER_HUB_USERNAME }}"
          echo "GitHub Repository: ${{ github.repository }}"
          echo "Docker Image Name: ${{ secrets.DOCKER_HUB_USERNAME }}/barber_shop_manager_backend"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/barber_shop_manager_backend:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/barber_shop_manager_backend:latest

  deploy:
    name: Deploy to Production
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Check and Create Target Directory
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.REMOTE_PORT }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "
            if [ ! -d \"${{ secrets.REMOTE_TARGET }}\" ]; then
              echo 'Target directory does not exist. Creating...' && \
              mkdir -p ${{ secrets.REMOTE_TARGET }} && \
              echo 'Directory created successfully.';
            else
              echo 'Target directory already exists.';
            fi
          "



      - name: Transfer Docker Compose, Dockerfile e .env
        run: |
          # Gere o arquivo .env para o servidor
          echo "REGISTRY=${{ env.REGISTRY }}" > .env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo "TAG=latest" >> .env
          echo "CONTAINER_NAME_APP=${{ env.CONTAINER_NAME_APP }}" >> .env
          echo "CONTAINER_NAME_DATABASE=${{ env.CONTAINER_NAME_DATABASE }}" >> .env
          echo "DOCKER_NETWORK_NAME=${{ env.DOCKER_NETWORK_NAME }}" >> .env
          
          # Configurações da Aplicação
          echo "NODE_ENV=production" >> .env
          echo "PORT=3333" >> .env
          echo "LOG_LEVEL=info" >> .env
          
          # Configurações do Banco de Dados
          echo "POSTGRES_PORT=${{ env.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_EXTERNAL_PORT=${{ env.POSTGRES_EXTERNAL_PORT }}" >> .env
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> .env
          
          # Configurações de JWT
          echo "ACCESS_TOKEN_EXPIRATION=${{ env.ACCESS_TOKEN_EXPIRATION }}" >> .env
          echo "REFRESH_TOKEN_EXPIRATION=${{ env.REFRESH_TOKEN_EXPIRATION }}" >> .env
          echo "JWT_SECRET_PUBLIC_KEY=${{ env.JWT_SECRET_PUBLIC_KEY }}" >> .env
          echo "JWT_SECRET_PRIVATE_KEY=${{ env.JWT_SECRET_PRIVATE_KEY }}" >> .env
          
          # Configurações de Email
          echo "MAIL_HOST=${{ env.MAIL_HOST }}" >> .env
          echo "MAIL_PORT=${{ env.MAIL_PORT }}" >> .env
          echo "MAIL_SECURE=${{ env.MAIL_SECURE }}" >> .env
          echo "MAIL_USER=${{ env.MAIL_USER }}" >> .env
          echo "MAIL_PASS=${{ env.MAIL_PASS }}" >> .env
          
          # Configurações de API Externa
          echo "EVOLUTION_API_KEY=${{ env.EVOLUTION_API_KEY }}" >> .env
          echo "EVOLUTION_API_URL=${{ env.EVOLUTION_API_URL }}" >> .env
          
          # Configurações de IA
          echo "AI_PROVIDER=${{ env.AI_PROVIDER }}" >> .env
          echo "DEEPSEEK_BASE_URL=${{ env.DEEPSEEK_BASE_URL }}" >> .env
          echo "DEEPSEEK_API_KEY=${{ env.DEEPSEEK_API_KEY }}" >> .env
          echo "VERBOSE_LOGGING=${{ env.VERBOSE_LOGGING }}" >> .env
          
          # Configurações de MCP (Opcional)
          echo "MCP_SERVER_URL=${{ env.MCP_SERVER_URL }}" >> .env
          echo "MCP_SERVER_PATH=${{ env.MCP_SERVER_PATH }}" >> .env
          
          # Transfira os arquivos necessários para o servidor
          scp -i ~/.ssh/deploy_key -P ${{ secrets.REMOTE_PORT }} docker-compose.yml Dockerfile .env ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_TARGET }}

      - name: Deploy to Server via SSH
        run: |
            ssh -i ~/.ssh/deploy_key -p ${{ secrets.REMOTE_PORT }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "\
              cd ${{ secrets.REMOTE_TARGET }} && \
              echo '=== DEBUG: Conteúdo do arquivo .env ===' && \
              cat .env && \
              echo '=== DEBUG: Variável DOCKER_NETWORK_NAME ===' && \
              echo \$DOCKER_NETWORK_NAME && \
              docker compose down && \
              docker compose pull && \
              docker compose up -d && \
              echo 'Barber Shop Manager deployed successfully'"

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key 